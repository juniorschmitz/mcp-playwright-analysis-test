name: API Tests with Postman Collection

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa diariamente às 08:00 UTC (05:00 BRT)
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Tipo de teste para executar'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - functional
        - integration
        - performance

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install Dependencies
      run: |
        npm ci
        npm install -g newman newman-reporter-htmlextra
        
    - name: 📁 Create Reports Directory
      run: mkdir -p reports
      
    - name: ✅ Validate Collection and Environment
      run: |
        echo "Validating Postman collection structure..."
        newman run postman/collection/ServeRest-Collection.json \
          -e postman/environment/ServeRest-Environment.json \
          --dry-run
          
    - name: 🧪 Run API Tests - All
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        newman run postman/collection/ServeRest-Collection.json \
          -e postman/environment/ServeRest-Environment.json \
          -r html,json,junit \
          --reporter-html-export reports/newman-report-all.html \
          --reporter-json-export reports/newman-report-all.json \
          --reporter-junit-export reports/newman-report-all.xml \
          --delay-request 300 \
          --timeout-request 10000 \
          --color off
          
    - name: 🔧 Run Functional Tests Only
      if: github.event.inputs.test_type == 'functional'
      run: |
        newman run postman/collection/ServeRest-Collection.json \
          -e postman/environment/ServeRest-Environment.json \
          --folder "1. MÓDULO LOGIN" \
          --folder "2. MÓDULO USUÁRIOS" \
          --folder "3. MÓDULO PRODUTOS" \
          --folder "4. MÓDULO CARRINHOS" \
          -r html,json,junit \
          --reporter-html-export reports/newman-report-functional.html \
          --reporter-json-export reports/newman-report-functional.json \
          --reporter-junit-export reports/newman-report-functional.xml \
          --delay-request 300 \
          --color off
          
    - name: 🔄 Run Integration Tests Only
      if: github.event.inputs.test_type == 'integration'
      run: |
        newman run postman/collection/ServeRest-Collection.json \
          -e postman/environment/ServeRest-Environment.json \
          --folder "5. TESTES DE INTEGRAÇÃO" \
          -r html,json,junit \
          --reporter-html-export reports/newman-report-integration.html \
          --reporter-json-export reports/newman-report-integration.json \
          --reporter-junit-export reports/newman-report-integration.xml \
          --delay-request 500 \
          --color off
          
    - name: ⚡ Run Performance Tests Only
      if: github.event.inputs.test_type == 'performance'
      run: |
        newman run postman/collection/ServeRest-Collection.json \
          -e postman/environment/ServeRest-Environment.json \
          --folder "6. TESTES DE PERFORMANCE" \
          -r html,json,junit \
          --reporter-html-export reports/newman-report-performance.html \
          --reporter-json-export reports/newman-report-performance.json \
          --reporter-junit-export reports/newman-report-performance.xml \
          --delay-request 100 \
          --color off
          
    - name: 📊 Generate Enhanced HTML Report
      if: always()
      run: |
        # Verificar se existem arquivos JSON para processar
        if ls reports/newman-report-*.json 1> /dev/null 2>&1; then
          echo "Gerando relatório HTML aprimorado..."
          for json_file in reports/newman-report-*.json; do
            base_name=$(basename "$json_file" .json)
            newman run postman/collection/ServeRest-Collection.json \
              -e postman/environment/ServeRest-Environment.json \
              -r htmlextra \
              --reporter-htmlextra-export "reports/${base_name}-enhanced.html" \
              --reporter-htmlextra-darkTheme \
              --reporter-htmlextra-title "ServeRest API Test Report" \
              --reporter-htmlextra-titleSize 2 \
              --reporter-htmlextra-logs \
              --suppress-exit-code \
              --delay-request 300 || echo "Enhanced report generation skipped"
          done
        else
          echo "Nenhum arquivo JSON encontrado para relatório aprimorado"
        fi
        
    - name: 📋 Parse Test Results
      if: always()
      run: |
        echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Processar resultados de todos os arquivos JSON
        for json_file in reports/newman-report-*.json; do
          if [ -f "$json_file" ]; then
            echo "### $(basename "$json_file" .json | sed 's/newman-report-//' | tr '[:lower:]' '[:upper:]')" >> $GITHUB_STEP_SUMMARY
            
            # Extrair estatísticas usando jq se disponível, senão usar grep
            if command -v jq &> /dev/null; then
              total=$(jq -r '.run.stats.tests.total // 0' "$json_file")
              passed=$(jq -r '.run.stats.tests.passed // 0' "$json_file")
              failed=$(jq -r '.run.stats.tests.failed // 0' "$json_file")
              
              echo "- ✅ **Passed**: $passed" >> $GITHUB_STEP_SUMMARY
              echo "- ❌ **Failed**: $failed" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 **Total**: $total" >> $GITHUB_STEP_SUMMARY
              
              if [ "$total" -gt 0 ]; then
                pass_rate=$(echo "scale=2; $passed * 100 / $total" | bc -l 2>/dev/null || echo "N/A")
                echo "- 📈 **Pass Rate**: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- Arquivo de resultado: $(basename "$json_file")" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: 📤 Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-node-${{ matrix.node-version }}
        path: reports/
        retention-days: 30
        
    - name: 📋 Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: API Test Results (Node ${{ matrix.node-version }})
        path: 'reports/newman-report-*.xml'
        reporter: java-junit
        fail-on-error: false
        
    - name: 💬 Comment PR with Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🧪 API Test Results\n\n';
          
          // Adicionar informações da matriz
          comment += `**Node.js Version**: ${{ matrix.node-version }}\n`;
          comment += `**Test Type**: ${{ github.event.inputs.test_type || 'all' }}\n\n`;
          
          // Procurar por arquivos de relatório
          const reportsDir = 'reports';
          if (fs.existsSync(reportsDir)) {
            const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.json'));
            
            if (files.length > 0) {
              comment += '### 📊 Test Summary\n\n';
              
              for (const file of files) {
                const filePath = path.join(reportsDir, file);
                try {
                  const content = fs.readFileSync(filePath, 'utf8');
                  const data = JSON.parse(content);
                  
                  const testName = file.replace('newman-report-', '').replace('.json', '');
                  const stats = data.run?.stats?.tests || {};
                  
                  comment += `**${testName.toUpperCase()}**\n`;
                  comment += `- ✅ Passed: ${stats.passed || 0}\n`;
                  comment += `- ❌ Failed: ${stats.failed || 0}\n`;
                  comment += `- 📊 Total: ${stats.total || 0}\n\n`;
                } catch (error) {
                  console.log(`Erro ao processar ${file}:`, error.message);
                }
              }
            } else {
              comment += '⚠️ No test reports found.\n\n';
            }
          }
          
          comment += '📁 Detailed reports are available in the workflow artifacts.\n';
          
          // Postar comentário
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: ❌ Fail Build on Test Failures
      if: failure()
      run: |
        echo "::error::Some tests failed. Check the reports for details."
        exit 1

  # Job para notificação de resultados
  notify:
    needs: api-tests
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: 📧 Notify on Schedule Failure
      if: needs.api-tests.result == 'failure'
      run: |
        echo "::warning::Scheduled API tests failed. Please check the repository."
        # Aqui você pode adicionar notificações via email, Slack, etc.
        
    - name: ✅ Notify on Schedule Success
      if: needs.api-tests.result == 'success'
      run: |
        echo "✅ Scheduled API tests passed successfully!"

  # Job de limpeza
  cleanup:
    needs: api-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🧹 Cleanup
      run: |
        echo "Workflow completed. Check artifacts for detailed reports."
        echo "API tests executed with Node.js versions: ${{ strategy.matrix.node-version }}"
